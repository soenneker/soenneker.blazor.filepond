@page "/validation-demo"
@using Soenneker.Blazor.FilePond
@using Soenneker.Blazor.FilePond.Dtos
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.FilePond.Enums
@using Soenneker.Blazor.FilePond.Options
@using Soenneker.Utils.Random
@inject ILogger<ValidationDemo> Logger

<div class="demo-container">
    <header class="demo-header">
        <div class="header-content">
            <h1 class="demo-title">FilePond Validation & Success Demo</h1>
            <p class="demo-subtitle">Experience the power of advanced file validation and success state management with our professional FilePond component.</p>
        </div>
    </header>

    <div class="demo-grid">
        <section class="demo-card validation-section">
            <div class="card-header">
                <div class="card-icon">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <div class="card-title-group">
                    <h2 class="card-title">Validation Features</h2>
                    <p class="card-description">Test validation states and error handling capabilities</p>
                </div>
            </div>
            
            <div class="filepond-container">
                <FilePond @ref="FilePond" 
                          Options="_options" 
                          IsValid="@_isValid"
                          ValidationErrorMessage="@_validationErrorMessage"
                          OnInit="OnInit" 
                          OnAddFile="OnAddFile">
                </FilePond>
            </div>

            <div class="action-group">
                <button @onclick="SetInvalid" class="action-btn action-btn--danger">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Set Invalid
                </button>
                <button @onclick="SetInvalidWithMessage" class="action-btn action-btn--warning">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M10.29 3.86L1.82 18A2 2 0 0 0 3.61 21H20.4A2 2 0 0 0 22.19 18L13.72 3.86A2 2 0 0 0 10.29 3.86Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <line x1="12" y1="9" x2="12" y2="13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <line x1="12" y1="17" x2="12.01" y2="17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Set Invalid with Message
                </button>
                <button @onclick="ResetValidation" class="action-btn action-btn--secondary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M12 7V12L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Reset to Neutral
                </button>
            </div>
        </section>

        <section class="demo-card success-section">
            <div class="card-header">
                <div class="card-icon">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <div class="card-title-group">
                    <h2 class="card-title">Success Management</h2>
                    <p class="card-description">Control file success states and visual feedback</p>
                </div>
            </div>
            
            <div class="action-group">
                <button @onclick="SetFirstFileSuccess" class="action-btn action-btn--success">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Set First File Success
                </button>
                <button @onclick="SetAllFilesSuccess" class="action-btn action-btn--success">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9 12L11 14L15 10M21 12C21 16.9706 16.9706 21 12 21C7.02944 21 3 16.9706 3 12C3 7.02944 7.02944 3 12 3C16.9706 3 21 7.02944 21 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Set All Files Success
                </button>
                <button @onclick="ClearAllSuccess" class="action-btn action-btn--secondary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 6H5H21M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Clear All Success
                </button>
                <button @onclick="SetFirstFileSuccessWhenReady" class="action-btn action-btn--info">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 2L13.09 8.26L20 9L13.09 9.74L12 16L10.91 9.74L4 9L10.91 8.26L12 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Set First File Success (When Ready)
                </button>
            </div>
        </section>

        <section class="demo-card management-section">
            <div class="card-header">
                <div class="card-icon">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M14 2H6A2 2 0 0 0 4 4V20A2 2 0 0 0 6 22H18A2 2 0 0 0 20 20V8L14 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <polyline points="14,2 14,8 20,8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <line x1="16" y1="13" x2="8" y2="13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <line x1="16" y1="17" x2="8" y2="17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                        <polyline points="10,9 9,9 8,9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </div>
                <div class="card-title-group">
                    <h2 class="card-title">File Management</h2>
                    <p class="card-description">Add, remove, and manage files programmatically</p>
                </div>
            </div>
            
            <div class="action-group">
                <button @onclick="AddFile" class="action-btn action-btn--primary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 5V19M5 12H19" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Add File
                </button>
                <button @onclick="AddMultipleFiles" class="action-btn action-btn--primary">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M16 16H16.01M12 12H12.01M8 8H8.01M3 12C3 13.1819 3.23279 14.3522 3.68508 15.4442C4.13738 16.5361 4.80031 17.5282 5.63604 18.364C6.47177 19.1997 7.46392 19.8626 8.55585 20.3149C9.64778 20.7672 10.8181 21 12 21C13.1819 21 14.3522 20.7672 15.4442 20.3149C16.5361 19.8626 17.5282 19.1997 18.364 18.364C19.1997 17.5282 19.8626 16.5361 20.3149 15.4442C20.7672 14.3522 21 13.1819 21 12C21 10.8181 20.7672 9.64778 20.3149 8.55585C19.8626 7.46392 19.1997 6.47177 18.364 5.63604C17.5282 4.80031 16.5361 4.13738 15.4442 3.68508C14.3522 3.23279 13.1819 3 12 3C10.8181 3 9.64778 3.23279 8.55585 3.68508C7.46392 4.13738 6.47177 4.80031 5.63604 5.63604C4.80031 6.47177 4.13738 7.46392 3.68508 8.55585C3.23279 9.64778 3 10.8181 3 12Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Add Multiple Files
                </button>
                <button @onclick="RemoveAllFiles" class="action-btn action-btn--danger">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M3 6H5H21M8 6V4C8 3.46957 8.21071 2.96086 8.58579 2.58579C8.96086 2.21071 9.46957 2 10 2H14C14.5304 2 15.0391 2.21071 15.4142 2.58579C15.7893 2.96086 16 3.46957 16 4V6M19 6V20C19 20.5304 18.7893 21.0391 18.4142 21.4142C18.0391 21.7893 17.5304 22 17 22H7C6.46957 22 5.96086 21.7893 5.58579 21.4142C5.21071 21.0391 5 20.5304 5 20V6H19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                    Remove All Files
                </button>
            </div>
        </section>
    </div>
</div>

<style>
    /* Modern CSS Reset and Base Styles */
    * {
        box-sizing: border-box;
    }

    /* Container and Layout */
    .demo-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem 1rem;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
        line-height: 1.6;
        color: #1a1a1a;
        background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
        min-height: 100vh;
    }

    /* Header Section */
    .demo-header {
        text-align: center;
        margin-bottom: 3rem;
        padding: 2rem 0;
    }

    .header-content {
        max-width: 800px;
        margin: 0 auto;
    }

    .demo-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin: 0 0 1rem 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        letter-spacing: -0.025em;
    }

    .demo-subtitle {
        font-size: 1.125rem;
        color: #64748b;
        margin: 0;
        font-weight: 400;
        line-height: 1.7;
    }

    /* Grid Layout */
    .demo-grid {
        display: grid;
        gap: 2rem;
        grid-template-columns: 1fr;
    }

    @@media (min-width: 768px) {
        .demo-grid {
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
        }
    }

    /* Card Design */
    .demo-card {
        background: white;
        border-radius: 16px;
        padding: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        border: 1px solid rgba(255, 255, 255, 0.8);
        backdrop-filter: blur(10px);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
    }

    .demo-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
    }

    .demo-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    }

    /* Card Header */
    .card-header {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        margin-bottom: 1.5rem;
    }

    .card-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 48px;
        height: 48px;
        border-radius: 12px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        flex-shrink: 0;
    }

    .card-title-group {
        flex: 1;
    }

    .card-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin: 0 0 0.5rem 0;
        color: #1e293b;
    }

    .card-description {
        font-size: 0.875rem;
        color: #64748b;
        margin: 0;
        line-height: 1.5;
    }

    /* Action Buttons */
    .action-group {
        display: flex;
        flex-wrap: wrap;
        gap: 0.75rem;
        margin-top: 1.5rem;
    }

    .action-btn {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.75rem 1.25rem;
        border: none;
        border-radius: 8px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        text-decoration: none;
        position: relative;
        overflow: hidden;
        min-height: 44px;
    }

    .action-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
    }

    .action-btn:hover::before {
        left: 100%;
    }

    .action-btn:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .action-btn:active {
        transform: translateY(0);
    }

    /* Button Variants */
    .action-btn--primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .action-btn--success {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
    }

    .action-btn--danger {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
    }

    .action-btn--warning {
        background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%);
        color: white;
    }

    .action-btn--secondary {
        background: linear-gradient(135deg, #6b7280 0%, #4b5563 100%);
        color: white;
    }

    .action-btn--info {
        background: linear-gradient(135deg, #06b6d4 0%, #0891b2 100%);
        color: white;
    }

    /* Responsive Design */
    @@media (max-width: 640px) {
        .demo-container {
            padding: 1rem 0.5rem;
        }

        .demo-title {
            font-size: 2rem;
        }

        .demo-card {
            padding: 1.5rem;
        }

        .action-group {
            flex-direction: column;
        }

        .action-btn {
            width: 100%;
            justify-content: center;
        }
    }

    /* Focus States for Accessibility */
    .action-btn:focus {
        outline: 2px solid #667eea;
        outline-offset: 2px;
    }

    /* Loading States */
    .action-btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
        transform: none;
    }

    /* Custom Scrollbar */
    ::-webkit-scrollbar {
        width: 8px;
    }

    ::-webkit-scrollbar-track {
        background: #f1f5f9;
    }

    ::-webkit-scrollbar-thumb {
        background: #cbd5e1;
        border-radius: 4px;
    }

    ::-webkit-scrollbar-thumb:hover {
        background: #94a3b8;
    }
</style>

@code {
    private FilePond? FilePond { get; set; }
    private bool _isValid = true; // This will be the default, but won't show green until explicitly validated
    private string? _validationErrorMessage;

    private readonly FilePondOptions _options = new()
    {
        MaxFileSize = 100_000_000,
        UseCdn = true,
        AllowMultiple = false
    };

    private void OnInit()
    {
        Logger.LogInformation("FilePond initialized");
    }

    private async Task SetInvalid()
    {
        _isValid = false;
        _validationErrorMessage = null;
        await FilePond!.SetValidationState(false);
    }

    private async Task SetInvalidWithMessage()
    {
        _isValid = false;
        _validationErrorMessage = "Please select at least one file to continue.";
        await FilePond!.SetValidationState(false, _validationErrorMessage);
    }

    private async Task ResetValidation()
    {
        _isValid = true;
        _validationErrorMessage = null;
        await FilePond!.ResetValidationState();
    }

    private async Task SetFirstFileSuccess()
    {
        await FilePond!.SetFileSuccess(0, true);
    }

    private async Task SetAllFilesSuccess()
    {
        await FilePond!.SetAllFilesSuccess(true);
    }

    private async Task ClearAllSuccess()
    {
        await FilePond!.SetAllFilesSuccess(false);
    }

    private async Task SetFirstFileSuccessWhenReady()
    {
        var files = await FilePond!.GetFiles();
        if (files?.Count > 0)
        {
            await FilePond.SetFileSuccessWhenReady(files[0].Id, true);
        }
    }

    private async Task AddFile()
    {
        await FilePond!.AddFile(GetRandomImageUri());
    }

    private async Task AddMultipleFiles()
    {
        await FilePond!.AddFiles([
            GetRandomImageUri(),
            GetRandomImageUri(),
            GetRandomImageUri()
        ]);
    }

    private async Task RemoveAllFiles()
    {
        await FilePond!.RemoveFiles();
    }

    private static string GetRandomImageUri()
    {
        int fileHeight = RandomUtil.Next(200, 500);
        int fileWidth = RandomUtil.Next(200, 500);
        return $"https://picsum.photos/{fileHeight}/{fileWidth}";
    }

    private async Task OnAddFile((FilePondError? error, FilePondFileItem fileItem) obj)
    {
        Logger.LogInformation("File added: {fileName}", obj.fileItem.Filename);
        
        // Use the new method that waits for the file to be ready
        await FilePond!.SetFileSuccessWhenReady(obj.fileItem.Id, true);
    }
}
