@using System.IO
@using System.Text.Json
@using System.Threading
@using Microsoft.Extensions.Logging
@using Soenneker.Blazor.FilePond.Abstract
@using Soenneker.Blazor.FilePond.Constants
@using Soenneker.Blazor.FilePond.Dtos
@using Soenneker.Blazor.FilePond.Options
@using Soenneker.Blazor.Utils.InteropEventListener.Abstract
@using Soenneker.Extensions.Enumerable
@using Soenneker.Extensions.List
@using Soenneker.Extensions.String
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask
@using Soenneker.Utils.Json
@inject IFilePondInterop FilePondInterop
@inject IInteropEventListener InteropEventListener
@inject ILogger<FilePond> _logger

@implements IFilePond

<div blazor-observer-id="@_elementId" ></div>
<div blazor-wrapper-id="@_elementId" >
    <input type="file" @attributes="Attributes" blazor-interop-id="@_elementId" />
</div>

@code {
    private string _elementId;

    private CancellationTokenSource _cTs;

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? Attributes { get; set; }

    [Parameter]
    public FilePondOptions? Options { get; set; }

    [Parameter]
    public EventCallback OnInit { get; set; }

    [Parameter]
    public EventCallback<(FilePondError? Error, FilePondFileItem File, string Status)> OnWarning { get; set; }

    [Parameter]
    public EventCallback<(FilePondError? Error, FilePondFileItem File, string Status)> OnError { get; set; }

    [Parameter]
    public EventCallback<FilePondFileItem> OnInitFile { get; set; }

    [Parameter]
    public EventCallback<FilePondFileItem> OnAddFileStart { get; set; }

    [Parameter]
    public EventCallback<(FilePondFileItem File, int Progress)> OnAddFileProgress { get; set; }

    [Parameter]
    public EventCallback<(FilePondError?, FilePondFileItem)> OnAddFile { get; set; }

    [Parameter]
    public EventCallback<FilePondFileItem> OnProcessFileStart { get; set; }

    [Parameter]
    public EventCallback<(FilePondFileItem File, int Progress)> OnProcessFileProgress { get; set; }

    [Parameter]
    public EventCallback<FilePondFileItem> OnProcessFileAbort { get; set; }

    [Parameter]
    public EventCallback<FilePondFileItem> OnProcessFileRevert { get; set; }

    [Parameter]
    public EventCallback<(FilePondError? Error, FilePondFileItem File)> OnProcessFile { get; set; }

    [Parameter]
    public EventCallback OnProcessFiles { get; set; }

    [Parameter]
    public EventCallback<(FilePondError? Error, FilePondFileItem File)> OnRemoveFile { get; set; }

    [Parameter]
    public EventCallback<(FilePondFileItem File, object Output)> OnPrepareFile { get; set; }

    [Parameter]
    public EventCallback<List<FilePondFileItem>> OnUpdateFiles { get; set; }

    [Parameter]
    public EventCallback<FilePondFileItem> OnActivateFile { get; set; }

    [Parameter]
    public EventCallback<(List<FilePondFileItem> Files, int Origin, int Target)> OnReorderFiles { get; set; }

    [Parameter]
    public EventCallback<FilePondFileItem> OnServerLoad { get; set; }

    [Parameter]
    public EventCallback<FilePondFileItem> OnServerError { get; set; }

    [Parameter]
    public EventCallback<FilePondFileItem> OnServerData { get; set; }

    [Parameter]
    public Func<FilePondFileItem, ValueTask<bool>>? OnBeforeDropFile { get; set; }

    [Parameter]
    public Func<FilePondFileItem, ValueTask<bool>>? OnBeforeAddFile { get; set; }

    [Parameter]
    public Func<FilePondFileItem, ValueTask<bool>>? OnBeforeRemoveFile { get; set; }

    [Parameter]
    public Func<FilePondFileRenameInfo, ValueTask<string>>? OnFileRename { get; set; }

    public List<FilePondFileItem> Files { get; private set; }

    private List<string> _silentAddFiles;

    private bool _initializing;
    private bool _initialized;

    private readonly List<Func<ValueTask>> _afterInitializationOperations;

    public FilePond()
    {
        _initializing = false;
        _initialized = false;
        _elementId = '_' + Guid.NewGuid().ToString();
        _cTs = new CancellationTokenSource();
        Files = [];
        _silentAddFiles = [];
        _afterInitializationOperations = [];
    }

    protected override async Task OnInitializedAsync()
    {
        await FilePondInterop.Initialize(Options?.UseCdn ?? true, _cTs.Token).NoSync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Options is {ManualCreate: true})
            {
                return;
            }

            if (Options != null)
            {
                if (Options.EnabledPlugins.Populated())
                    await FilePondInterop.EnablePlugins(Options.UseCdn, Options.EnabledPlugins, _cTs.Token).NoSync();

                if (Options.EnabledOtherPlugins.Populated())
                    await FilePondInterop.EnableOtherPlugins(Options.UseCdn, Options.EnabledOtherPlugins, _cTs.Token).NoSync();
            }

            await Create(cancellationToken: _cTs.Token).NoSync();
            await FilePondInterop.CreateObserver(_elementId, _cTs.Token).NoSync();
        }
    }

    public async ValueTask Create(FilePondOptions? options = null, CancellationToken cancellationToken = default)
    {
        if (_initialized || _initializing)
        {
            _logger.LogError("FilePond 'Create' cannot be called multiple times without destroying the instance first");
            return;
        }

        _initializing = true;

        if (options != null)
            Options = options;

        InteropEventListener.Initialize(FilePondInterop);

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await FilePondInterop.Create(_elementId, Options, linkedCts.Token).NoSync();

        await AddEventListeners(linkedCts.Token).NoSync();

        _initialized = true;
        _initializing = false;

        foreach (Func<ValueTask> valueTaskFunc in _afterInitializationOperations)
        {
            await valueTaskFunc();
        }

        _afterInitializationOperations.Clear();
    }

    public async ValueTask SetOptions(FilePondOptions options, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await FilePondInterop.SetOptions(_elementId, options, linkedCts.Token).NoSync();
    }

    public ValueTask AddFile(string uriOrBase64EncodedData, bool silentAdd, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            if (silentAdd)
                AddSilentFileNameFromUri(uriOrBase64EncodedData);

            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.AddFile(_elementId, uriOrBase64EncodedData, null, linkedCts.Token).NoSync();
        });
    }

    public ValueTask AddFile(string uriOrBase64EncodedData, FilePondAddFileOptions? options = null, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            if (options is {SilentAdd: true})
            {
                AddSilentFileNameFromUri(uriOrBase64EncodedData);
            }

            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.AddFile(_elementId, uriOrBase64EncodedData, options, linkedCts.Token);
        });
    }

    public ValueTask AddFile(Stream stream, FilePondAddFileOptions? options = null, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.AddFile(_elementId, stream, options, linkedCts.Token).NoSync();
        });
    }

    public ValueTask AddFiles(List<string> uriOrBase64EncodedData, FilePondAddFileOptions? options = null, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            if (options is {SilentAdd: true})
            {
                foreach (string uri in uriOrBase64EncodedData)
                {
                    AddSilentFileNameFromUri(uri);
                }
            }

            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.AddFiles(_elementId, uriOrBase64EncodedData, options, linkedCts.Token).NoSync();
        });
    }

    public ValueTask RemoveFile(FilePondRemoveFileOptions? options = null, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.RemoveFile(_elementId, null, options, linkedCts.Token).NoSync();
        });
    }

    public ValueTask RemoveFile(string fileId, FilePondRemoveFileOptions? options = null, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.RemoveFile(_elementId, fileId, options, linkedCts.Token).NoSync();
        });
    }

    public ValueTask RemoveFile(int index, FilePondRemoveFileOptions? options = null, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.RemoveFile(_elementId, index, options, linkedCts.Token).NoSync();
        });
    }

    public ValueTask RemoveFiles(object? query = null, FilePondRemoveFileOptions? options = null, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.RemoveFiles(_elementId, query, options, linkedCts.Token).NoSync();
        });
    }

    public ValueTask ProcessFile(object? query = null, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.ProcessFile(_elementId, query, linkedCts.Token).NoSync();
        });
    }

    public ValueTask ProcessFiles(object? query = null, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.ProcessFiles(_elementId, query, linkedCts.Token).NoSync();
        });
    }

    public async ValueTask<object> PrepareFile(object? query = null, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await FilePondInterop.PrepareFile(_elementId, query, linkedCts.Token).NoSync();
    }

    public async ValueTask<object[]> PrepareFiles(object? query = null, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await FilePondInterop.PrepareFiles(_elementId, query, linkedCts.Token).NoSync();
    }

    public async ValueTask<FilePondFileItem?> GetFile(bool forceInterop = false, CancellationToken cancellationToken = default)
    {
        if (!forceInterop)
            return Files.FirstOrDefault();

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await FilePondInterop.GetFile(_elementId, null, linkedCts.Token).NoSync();
    }

    public async ValueTask<FilePondFileItem?> GetFile(int index, bool forceInterop = false, CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);

        if (forceInterop)
            return await FilePondInterop.GetFile(_elementId, index, linkedCts.Token).NoSync();

        if (Files.Count > index)
            return Files[index];

        return null;
    }

    public async ValueTask<FilePondFileItem?> GetFile(string fileId, bool forceInterop = false, CancellationToken cancellationToken = default)
    {
        if (!forceInterop)
            return Files.FirstOrDefault(c => c.Id == fileId);

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await FilePondInterop.GetFile(_elementId, fileId, linkedCts.Token).NoSync();
    }

    public async ValueTask<List<FilePondFileItem>?> GetFiles(bool forceInterop = false, CancellationToken cancellationToken = default)
    {
        if (!forceInterop)
            return Files;

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        List<FilePondFileItem>? tempFiles = await FilePondInterop.GetFiles(_elementId, linkedCts.Token).NoSync();

        if (tempFiles != null)
            Files = tempFiles;

        return Files;
    }

    public ValueTask Browse(CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.Browse(_elementId, linkedCts.Token).NoSync();
        });
    }

    public ValueTask Sort(string compareFunctionName, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.Sort(_elementId, compareFunctionName, linkedCts.Token).NoSync();
        });
    }

    public ValueTask MoveFile(object query, int index, CancellationToken cancellationToken = default)
    {
        return EnqueueOrExecute(async () =>
        {
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
            await FilePondInterop.MoveFile(_elementId, query, index, linkedCts.Token).NoSync();
        });
    }

    public async ValueTask Destroy(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await FilePondInterop.Destroy(_elementId, linkedCts.Token).NoSync();
    }

    public async ValueTask ReInitialize(CancellationToken cancellationToken = default)
    {
        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        await FilePondInterop.Destroy(_elementId, linkedCts.Token).NoSync();
        await Create(Options, linkedCts.Token).NoSync();
    }

    public async ValueTask<Stream?> GetStreamForFile(long? maxAllowedSize = null, CancellationToken cancellationToken = default)
    {
        maxAllowedSize ??= Options?.MaxFileSize ?? FilePondConstants.DefaultMaximumSize;

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await FilePondInterop.GetStreamForFile(_elementId, null, maxAllowedSize.Value, linkedCts.Token).NoSync();
    }

    public async ValueTask<Stream?> GetStreamForFile(int index, long? maxAllowedSize = null, CancellationToken cancellationToken = default)
    {
        maxAllowedSize ??= Options?.MaxFileSize ?? FilePondConstants.DefaultMaximumSize;

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await FilePondInterop.GetStreamForFile(_elementId, index, maxAllowedSize.Value, linkedCts.Token).NoSync();
    }

    public async ValueTask<Stream?> GetStreamForFile(string fileId, long? maxAllowedSize = null, CancellationToken cancellationToken = default)
    {
        maxAllowedSize ??= Options?.MaxFileSize ?? FilePondConstants.DefaultMaximumSize;

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await FilePondInterop.GetStreamForFile(_elementId, fileId, maxAllowedSize.Value, linkedCts.Token).NoSync();
    }

    public async ValueTask<List<Stream>> GetAllStreams(long? maxAllowedSize = null, CancellationToken cancellationToken = default)
    {
        maxAllowedSize ??= Options?.MaxFileSize ?? FilePondConstants.DefaultMaximumSize;

        using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cTs.Token);
        return await FilePondInterop.GetAllStreams(_elementId, maxAllowedSize.Value, linkedCts.Token).NoSync();
    }

    private async ValueTask AddEventListeners(CancellationToken cancellationToken)
    {
        if (OnInit.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnInit)), async str => { await OnInit.InvokeAsync().NoSync(); }, cancellationToken).NoSync();
        }

        if (OnWarning.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnWarning)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    (FilePondError?, FilePondFileItem, string) parameters = (jsonDocument.RootElement[0].Deserialize<FilePondError>(), jsonDocument.RootElement[1].Deserialize<FilePondFileItem>()!, jsonDocument.RootElement[2].GetString()!);

                    await OnWarning.InvokeAsync(parameters).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnError.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnError)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    (FilePondError?, FilePondFileItem, string) parameters = (jsonDocument.RootElement[0].Deserialize<FilePondError>(), jsonDocument.RootElement[1].Deserialize<FilePondFileItem>()!, jsonDocument.RootElement[2].GetString()!);

                    await OnError.InvokeAsync(parameters).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnInitFile.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnInitFile)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    var file = jsonDocument.RootElement[0].Deserialize<FilePondFileItem>()!;
                    await OnInitFile.InvokeAsync(file).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnAddFileStart.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnAddFileStart)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    var file = jsonDocument.RootElement[0].Deserialize<FilePondFileItem>()!;
                    await OnAddFileStart.InvokeAsync(file).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnAddFileProgress.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnAddFileProgress)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    (FilePondFileItem, int) parameters = (jsonDocument.RootElement[0].Deserialize<FilePondFileItem>()!, jsonDocument.RootElement[1].GetInt32());

                    await OnAddFileProgress.InvokeAsync(parameters).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        await AddEventListener<string>(GetJsEventName(nameof(OnAddFile)), async str =>
            {
                JsonDocument jsonDocument = JsonDocument.Parse(str);

                var error = jsonDocument.RootElement[0].Deserialize<FilePondError>();
                var file = jsonDocument.RootElement[1].Deserialize<FilePondFileItem>()!;

                Files.Add(file);

                if (OnAddFile.HasDelegate)
                {
                    if (_silentAddFiles.Contains(file.Filename))
                    {
                        _silentAddFiles.Remove(file.Filename);
                        return;
                    }

                    await OnAddFile.InvokeAsync((error, file)).NoSync();
                }
            }, cancellationToken)
            .NoSync();

        if (OnProcessFileStart.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnProcessFileStart)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    var file = jsonDocument.RootElement[0].Deserialize<FilePondFileItem>()!;

                    await OnProcessFileStart.InvokeAsync(file).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnProcessFileProgress.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnProcessFileProgress)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    (FilePondFileItem, int) parameters = (jsonDocument.RootElement[0].Deserialize<FilePondFileItem>()!, jsonDocument.RootElement[1].GetInt32());

                    await OnProcessFileProgress.InvokeAsync(parameters).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnProcessFileAbort.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnProcessFileAbort)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    var file = jsonDocument.RootElement[0].Deserialize<FilePondFileItem>()!;

                    await OnProcessFileAbort.InvokeAsync(file).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnProcessFileRevert.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnProcessFileRevert)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    var file = jsonDocument.RootElement[0].Deserialize<FilePondFileItem>()!;

                    await OnProcessFileRevert.InvokeAsync(file).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnProcessFile.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnProcessFile)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);

                    var parameters = (jsonDocument.RootElement[0].Deserialize<FilePondError>(), jsonDocument.RootElement[1].Deserialize<FilePondFileItem>()!);

                    await OnProcessFile.InvokeAsync(parameters).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnProcessFiles.HasDelegate)
        {
            // Uncomment and adjust the types accordingly
            // await AddEventListener<string>(
            //     GetJsEventName(nameof(OnProcessFiles)),
            //     async e => await OnProcessFiles.InvokeAsync()
            // );
        }

        await AddEventListener<string>(GetJsEventName(nameof(OnRemoveFile)), async str =>
            {
                JsonDocument jsonDocument = JsonDocument.Parse(str);

                var error = jsonDocument.RootElement[0].Deserialize<FilePondError>();
                var file = jsonDocument.RootElement[1].Deserialize<FilePondFileItem>()!;

                Files.Remove(c => c.Id == file.Id);

                if (OnRemoveFile.HasDelegate)
                    await OnRemoveFile.InvokeAsync((error, file)).NoSync();
            }, cancellationToken)
            .NoSync();


        if (OnPrepareFile.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnPrepareFile)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    var parameters = (jsonDocument.RootElement[0].Deserialize<FilePondFileItem>()!, jsonDocument.RootElement[1].Deserialize<object>()!);

                    await OnPrepareFile.InvokeAsync(parameters).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnUpdateFiles.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnUpdateFiles)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    List<FilePondFileItem> files = jsonDocument.RootElement.EnumerateArray().Select(item => item.Deserialize<FilePondFileItem>()!).ToList();
                    await OnUpdateFiles.InvokeAsync(files).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnActivateFile.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnActivateFile)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    var file = jsonDocument.RootElement[0].Deserialize<FilePondFileItem>()!;

                    await OnActivateFile.InvokeAsync(file).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnReorderFiles.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnReorderFiles)), async str =>
                {
                    JsonDocument jsonDocument = JsonDocument.Parse(str);
                    (List<FilePondFileItem>, int, int) parameters = (jsonDocument.RootElement[0].EnumerateArray().Select(item => item.Deserialize<FilePondFileItem>()!).ToList(), jsonDocument.RootElement[1].GetInt32(), jsonDocument.RootElement[2].GetInt32());

                    await OnReorderFiles.InvokeAsync(parameters).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnServerLoad.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnServerLoad)), async str =>
                {
                    // JsonDocument jsonDocument = JsonDocument.Parse(e);
                    // (List<FilePondFileItem>, int, int) parameters = (
                    //     jsonDocument.RootElement[0].EnumerateArray()
                    //         .Select(item => item.Deserialize<FilePondFileItem>()!)
                    //         .ToList(),
                    //     jsonDocument.RootElement[1].GetInt32(),
                    //     jsonDocument.RootElement[2].GetInt32()
                    // );
                    await OnServerLoad.InvokeAsync().NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnServerError.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnServerError)), async str =>
                {
                    // JsonDocument jsonDocument = JsonDocument.Parse(e);
                    // (List<FilePondFileItem>, int, int) parameters = (
                    //     jsonDocument.RootElement[0].EnumerateArray()
                    //         .Select(item => item.Deserialize<FilePondFileItem>()!)
                    //         .ToList(),
                    //     jsonDocument.RootElement[1].GetInt32(),
                    //     jsonDocument.RootElement[2].GetInt32()
                    // );
                    await OnServerError.InvokeAsync().NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnServerData.HasDelegate)
        {
            await AddEventListener<string>(GetJsEventName(nameof(OnServerData)), async str =>
                {
                    // JsonDocument jsonDocument = JsonDocument.Parse(e);
                    // (List<FilePondFileItem>, int, int) parameters = (
                    //     jsonDocument.RootElement[0].EnumerateArray()
                    //         .Select(item => item.Deserialize<FilePondFileItem>()!)
                    //         .ToList(),
                    //     jsonDocument.RootElement[1].GetInt32(),
                    //     jsonDocument.RootElement[2].GetInt32()
                    // );
                    await OnServerData.InvokeAsync().NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnBeforeAddFile != null)
        {
            await AddEventListener<string, bool>(nameof(OnBeforeAddFile), async str =>
                {
                    var file = JsonUtil.Deserialize<FilePondFileItem>(str);
                    return await OnBeforeAddFile(file!).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnBeforeDropFile != null)
        {
            await AddEventListener<string, bool>(nameof(OnBeforeDropFile), async str =>
                {
                    var file = JsonUtil.Deserialize<FilePondFileItem>(str);
                    return await OnBeforeDropFile(file!).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnBeforeRemoveFile != null)
        {
            await AddEventListener<string, bool>(nameof(OnBeforeDropFile), async str =>
                {
                    var file = JsonUtil.Deserialize<FilePondFileItem>(str);
                    return await OnBeforeRemoveFile(file!).NoSync();
                }, cancellationToken)
                .NoSync();
        }

        if (OnFileRename != null)
        {
            await AddEventListener<string, string>(nameof(OnFileRename), async str =>
                {
                    var file = JsonUtil.Deserialize<FilePondFileRenameInfo>(str);
                    return await OnFileRename(file!).NoSync();
                }, cancellationToken)
                .NoSync();
        }
    }

    private static string GetJsEventName(string callback)
    {
        // Remove first two characters
        string subStr = callback[2..];
        return subStr.ToLowerInvariantFast();
    }

    private ValueTask AddEventListener<T>(string eventName, Func<T, ValueTask> callback, CancellationToken cancellationToken)
    {
        // Don't need to link the cancellationToken because it's already been linked
        return InteropEventListener.Add($"{nameof(FilePondInterop)}.addEventListener", _elementId, eventName, callback, cancellationToken);
    }

    private ValueTask AddEventListener<TInput, TOutput>(string eventName, Func<TInput, ValueTask<TOutput>> callback, CancellationToken cancellationToken)
    {
        // Don't need to link the cancellationToken because it's already been linked
        return InteropEventListener.Add($"{nameof(FilePondInterop)}.addOutputEventListener", _elementId, eventName, callback, cancellationToken);
    }

    private void AddSilentFileNameFromUri(string uri)
    {
        if (!Uri.TryCreate(uri, UriKind.Absolute, out Uri? uriObj))
            return;

        string fileName = Path.GetFileName(uriObj.AbsolutePath);

        _silentAddFiles.Add(fileName);
    }

    private async ValueTask EnqueueOrExecute(Func<ValueTask> taskFunc)
    {
        if (_initialized)
            await taskFunc().NoSync();
        else
            _afterInitializationOperations.Add(taskFunc);
    }

    public async ValueTask DisposeAsync()
    {
        Files.Clear();
        _silentAddFiles.Clear();
        _afterInitializationOperations.Clear();
        await _cTs.CancelAsync().NoSync();
        InteropEventListener.DisposeForElement(_elementId);
        _initialized = false;
        _initializing = false;
    }

}